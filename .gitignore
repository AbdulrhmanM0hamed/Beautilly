# Miscellaneous
.DS_Store
.env

# Flutter
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
build/

# Android
android/app/build/
android/build/
android/.gradle/
android/key.properties
android/app/.cxx/

# iOS
ios/Pods/
ios/Runner/GeneratedPluginRegistrant.h
ios/Runner/GeneratedPluginRegistrant.m
ios/.symlinks/
ios/Flutter/App.framework
ios/Flutter/engine.xcframework
ios/Flutter/flutter_assets/

# Web
web/build/
web/.dart_tool/

# Windows
windows/build/
windows/flutter/ephemeral/
windows/.vs/

# macOS
macos/build/
macos/Flutter/ephemeral/

# Linux
linux/build/
linux/flutter/ephemeral/
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/

# IntelliJ
.idea/
*.iml
*.ipr
*.iws

# Visual Studio Code
.vscode/

# Flutter
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
build/

# Dart
.dart_tool/

# Generated files
lib/generated_plugin_registrant.dart

# Shorebird
.shorebird/
shorebird.yaml
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services' 
    id 'dev.flutter.flutter-gradle-plugin'
}DS_Store
.atom/
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }te_working_dir/
}
# IntelliJ related
def flutterRoot = localProperties.getProperty('flutter.sdk')
*.ipr
*.iws
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1's launch configuration and tasks you configure in
} VS Code which you may wish to be included in version control, so this line
# is commented out by default.
def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}*/doc/api/
**/ios/Flutter/.last_build_id
def keystorePropertiesFile = rootProject.file("key.properties")l/
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {.pub/
    namespace "com.dallik.beautilly"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion "25.1.8937393"

    compileOptions {
        coreLibraryDesugaringEnabled true# Obfuscation related
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }roid Studio will place build artifacts here
/android/app/debug
    kotlinOptions {file
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += [development
            'src/main/kotlin',.env.production
            'src/main/java',
        ]    }    defaultConfig {        applicationId "com.dallik.beautilly"        minSdkVersion 21        targetSdkVersion flutter.targetSdkVersion        versionCode flutterVersionCode.toInteger()        versionName flutterVersionName    }    signingConfigs {        release {            keyAlias keystoreProperties['keyAlias']            keyPassword keystoreProperties['keyPassword']            storeFile file(keystoreProperties['storeFile'])            storePassword keystoreProperties['storePassword']        }    }    buildTypes {        release {            signingConfig signingConfigs.release        }    }}flutter {
    source '../..'
}

dependencies {
